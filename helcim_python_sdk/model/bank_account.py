# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class BankAccount(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "firstName",
            "lastName",
            "province",
            "city",
            "streetAddress",
            "accountType",
            "companyName",
            "postalCode",
            "accountCorporate",
            "bankAccountNumber",
        }
        
        class properties:
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            companyName = schemas.StrSchema
            bankAccountNumber = schemas.StrSchema
            accountType = schemas.StrSchema
            accountCorporate = schemas.StrSchema
            streetAddress = schemas.StrSchema
            city = schemas.StrSchema
            country = schemas.StrSchema
            province = schemas.StrSchema
            postalCode = schemas.StrSchema
            bankIdNumber = schemas.StrSchema
            transitNumber = schemas.StrSchema
            routingNumber = schemas.StrSchema
            padAgreement = schemas.BoolSchema
            __annotations__ = {
                "firstName": firstName,
                "lastName": lastName,
                "companyName": companyName,
                "bankAccountNumber": bankAccountNumber,
                "accountType": accountType,
                "accountCorporate": accountCorporate,
                "streetAddress": streetAddress,
                "city": city,
                "country": country,
                "province": province,
                "postalCode": postalCode,
                "bankIdNumber": bankIdNumber,
                "transitNumber": transitNumber,
                "routingNumber": routingNumber,
                "padAgreement": padAgreement,
            }
    
    country: MetaOapg.properties.country
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    province: MetaOapg.properties.province
    city: MetaOapg.properties.city
    streetAddress: MetaOapg.properties.streetAddress
    accountType: MetaOapg.properties.accountType
    companyName: MetaOapg.properties.companyName
    postalCode: MetaOapg.properties.postalCode
    accountCorporate: MetaOapg.properties.accountCorporate
    bankAccountNumber: MetaOapg.properties.bankAccountNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccountNumber"]) -> MetaOapg.properties.bankAccountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountType"]) -> MetaOapg.properties.accountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountCorporate"]) -> MetaOapg.properties.accountCorporate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetAddress"]) -> MetaOapg.properties.streetAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["province"]) -> MetaOapg.properties.province: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankIdNumber"]) -> MetaOapg.properties.bankIdNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitNumber"]) -> MetaOapg.properties.transitNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routingNumber"]) -> MetaOapg.properties.routingNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["padAgreement"]) -> MetaOapg.properties.padAgreement: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "companyName", "bankAccountNumber", "accountType", "accountCorporate", "streetAddress", "city", "country", "province", "postalCode", "bankIdNumber", "transitNumber", "routingNumber", "padAgreement", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccountNumber"]) -> MetaOapg.properties.bankAccountNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountType"]) -> MetaOapg.properties.accountType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountCorporate"]) -> MetaOapg.properties.accountCorporate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetAddress"]) -> MetaOapg.properties.streetAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["province"]) -> MetaOapg.properties.province: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankIdNumber"]) -> typing.Union[MetaOapg.properties.bankIdNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitNumber"]) -> typing.Union[MetaOapg.properties.transitNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routingNumber"]) -> typing.Union[MetaOapg.properties.routingNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["padAgreement"]) -> typing.Union[MetaOapg.properties.padAgreement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "companyName", "bankAccountNumber", "accountType", "accountCorporate", "streetAddress", "city", "country", "province", "postalCode", "bankIdNumber", "transitNumber", "routingNumber", "padAgreement", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        province: typing.Union[MetaOapg.properties.province, str, ],
        city: typing.Union[MetaOapg.properties.city, str, ],
        streetAddress: typing.Union[MetaOapg.properties.streetAddress, str, ],
        accountType: typing.Union[MetaOapg.properties.accountType, str, ],
        companyName: typing.Union[MetaOapg.properties.companyName, str, ],
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, ],
        accountCorporate: typing.Union[MetaOapg.properties.accountCorporate, str, ],
        bankAccountNumber: typing.Union[MetaOapg.properties.bankAccountNumber, str, ],
        bankIdNumber: typing.Union[MetaOapg.properties.bankIdNumber, str, schemas.Unset] = schemas.unset,
        transitNumber: typing.Union[MetaOapg.properties.transitNumber, str, schemas.Unset] = schemas.unset,
        routingNumber: typing.Union[MetaOapg.properties.routingNumber, str, schemas.Unset] = schemas.unset,
        padAgreement: typing.Union[MetaOapg.properties.padAgreement, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BankAccount':
        return super().__new__(
            cls,
            *args,
            country=country,
            firstName=firstName,
            lastName=lastName,
            province=province,
            city=city,
            streetAddress=streetAddress,
            accountType=accountType,
            companyName=companyName,
            postalCode=postalCode,
            accountCorporate=accountCorporate,
            bankAccountNumber=bankAccountNumber,
            bankIdNumber=bankIdNumber,
            transitNumber=transitNumber,
            routingNumber=routingNumber,
            padAgreement=padAgreement,
            _configuration=_configuration,
            **kwargs,
        )
