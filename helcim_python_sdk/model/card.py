# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class Card(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cardCVV",
            "cardExpiry",
            "cardHolderName",
            "cardNumber",
        }
        
        class properties:
            cardNumber = schemas.StrSchema
            cardExpiry = schemas.StrSchema
            cardCVV = schemas.StrSchema
            __annotations__ = {
                "cardNumber": cardNumber,
                "cardExpiry": cardExpiry,
                "cardCVV": cardCVV,
            }
    
    cardCVV: MetaOapg.properties.cardCVV
    cardExpiry: MetaOapg.properties.cardExpiry
    cardHolderName: schemas.AnyTypeSchema
    cardNumber: MetaOapg.properties.cardNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardNumber"]) -> MetaOapg.properties.cardNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardExpiry"]) -> MetaOapg.properties.cardExpiry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardCVV"]) -> MetaOapg.properties.cardCVV: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardNumber", "cardExpiry", "cardCVV", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardNumber"]) -> MetaOapg.properties.cardNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardExpiry"]) -> MetaOapg.properties.cardExpiry: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardCVV"]) -> MetaOapg.properties.cardCVV: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardNumber", "cardExpiry", "cardCVV", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cardCVV: typing.Union[MetaOapg.properties.cardCVV, str, ],
        cardExpiry: typing.Union[MetaOapg.properties.cardExpiry, str, ],
        cardHolderName: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        cardNumber: typing.Union[MetaOapg.properties.cardNumber, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Card':
        return super().__new__(
            cls,
            *args,
            cardCVV=cardCVV,
            cardExpiry=cardExpiry,
            cardHolderName=cardHolderName,
            cardNumber=cardNumber,
            _configuration=_configuration,
            **kwargs,
        )
