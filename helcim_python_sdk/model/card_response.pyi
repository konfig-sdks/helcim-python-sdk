# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class CardResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            cardToken = schemas.StrSchema
            dateCreated = schemas.StrSchema
            dateUpdated = schemas.StrSchema
            cardHolderName = schemas.StrSchema
            cardF6L4 = schemas.StrSchema
            cardExpiry = schemas.StrSchema
            cardCVV = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "cardToken": cardToken,
                "dateCreated": dateCreated,
                "dateUpdated": dateUpdated,
                "cardHolderName": cardHolderName,
                "cardF6L4": cardF6L4,
                "cardExpiry": cardExpiry,
                "cardCVV": cardCVV,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardToken"]) -> MetaOapg.properties.cardToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateUpdated"]) -> MetaOapg.properties.dateUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardF6L4"]) -> MetaOapg.properties.cardF6L4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardExpiry"]) -> MetaOapg.properties.cardExpiry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardCVV"]) -> MetaOapg.properties.cardCVV: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "cardToken", "dateCreated", "dateUpdated", "cardHolderName", "cardF6L4", "cardExpiry", "cardCVV", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardToken"]) -> typing.Union[MetaOapg.properties.cardToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateUpdated"]) -> typing.Union[MetaOapg.properties.dateUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardHolderName"]) -> typing.Union[MetaOapg.properties.cardHolderName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardF6L4"]) -> typing.Union[MetaOapg.properties.cardF6L4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardExpiry"]) -> typing.Union[MetaOapg.properties.cardExpiry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardCVV"]) -> typing.Union[MetaOapg.properties.cardCVV, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "cardToken", "dateCreated", "dateUpdated", "cardHolderName", "cardF6L4", "cardExpiry", "cardCVV", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cardToken: typing.Union[MetaOapg.properties.cardToken, str, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, schemas.Unset] = schemas.unset,
        dateUpdated: typing.Union[MetaOapg.properties.dateUpdated, str, schemas.Unset] = schemas.unset,
        cardHolderName: typing.Union[MetaOapg.properties.cardHolderName, str, schemas.Unset] = schemas.unset,
        cardF6L4: typing.Union[MetaOapg.properties.cardF6L4, str, schemas.Unset] = schemas.unset,
        cardExpiry: typing.Union[MetaOapg.properties.cardExpiry, str, schemas.Unset] = schemas.unset,
        cardCVV: typing.Union[MetaOapg.properties.cardCVV, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardResponse':
        return super().__new__(
            cls,
            *args,
            id=id,
            cardToken=cardToken,
            dateCreated=dateCreated,
            dateUpdated=dateUpdated,
            cardHolderName=cardHolderName,
            cardF6L4=cardF6L4,
            cardExpiry=cardExpiry,
            cardCVV=cardCVV,
            _configuration=_configuration,
            **kwargs,
        )
