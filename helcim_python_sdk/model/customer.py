# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class Customer(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            customerCode = schemas.StrSchema
            businessName = schemas.StrSchema
            contactName = schemas.StrSchema
            cellPhone = schemas.StrSchema
        
            @staticmethod
            def billingAddress() -> typing.Type['Address']:
                return Address
        
            @staticmethod
            def shippingAddress() -> typing.Type['Address']:
                return Address
            
            
            class cards(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Card1']:
                        return Card1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Card1'], typing.List['Card1']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cards':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Card1':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "customerCode": customerCode,
                "businessName": businessName,
                "contactName": contactName,
                "cellPhone": cellPhone,
                "billingAddress": billingAddress,
                "shippingAddress": shippingAddress,
                "cards": cards,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerCode"]) -> MetaOapg.properties.customerCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessName"]) -> MetaOapg.properties.businessName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactName"]) -> MetaOapg.properties.contactName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cellPhone"]) -> MetaOapg.properties.cellPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shippingAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cards"]) -> MetaOapg.properties.cards: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "customerCode", "businessName", "contactName", "cellPhone", "billingAddress", "shippingAddress", "cards", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerCode"]) -> typing.Union[MetaOapg.properties.customerCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessName"]) -> typing.Union[MetaOapg.properties.businessName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactName"]) -> typing.Union[MetaOapg.properties.contactName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cellPhone"]) -> typing.Union[MetaOapg.properties.cellPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shippingAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cards"]) -> typing.Union[MetaOapg.properties.cards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "customerCode", "businessName", "contactName", "cellPhone", "billingAddress", "shippingAddress", "cards", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customerCode: typing.Union[MetaOapg.properties.customerCode, str, schemas.Unset] = schemas.unset,
        businessName: typing.Union[MetaOapg.properties.businessName, str, schemas.Unset] = schemas.unset,
        contactName: typing.Union[MetaOapg.properties.contactName, str, schemas.Unset] = schemas.unset,
        cellPhone: typing.Union[MetaOapg.properties.cellPhone, str, schemas.Unset] = schemas.unset,
        billingAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        shippingAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        cards: typing.Union[MetaOapg.properties.cards, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Customer':
        return super().__new__(
            cls,
            *args,
            id=id,
            customerCode=customerCode,
            businessName=businessName,
            contactName=contactName,
            cellPhone=cellPhone,
            billingAddress=billingAddress,
            shippingAddress=shippingAddress,
            cards=cards,
            _configuration=_configuration,
            **kwargs,
        )

from helcim_python_sdk.model.address import Address
from helcim_python_sdk.model.card1 import Card1
