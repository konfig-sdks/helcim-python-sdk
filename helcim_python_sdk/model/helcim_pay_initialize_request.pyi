# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class HelcimPayInitializeRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "currency",
            "paymentType",
        }
        
        class properties:
            paymentType = schemas.StrSchema
            amount = schemas.NumberSchema
            currency = schemas.StrSchema
            customerCode = schemas.StrSchema
            invoiceNumber = schemas.StrSchema
            paymentMethod = schemas.StrSchema
            allowPartial = schemas.NumberSchema
            hasConvenienceFee = schemas.NumberSchema
            taxAmount = schemas.NumberSchema
            __annotations__ = {
                "paymentType": paymentType,
                "amount": amount,
                "currency": currency,
                "customerCode": customerCode,
                "invoiceNumber": invoiceNumber,
                "paymentMethod": paymentMethod,
                "allowPartial": allowPartial,
                "hasConvenienceFee": hasConvenienceFee,
                "taxAmount": taxAmount,
            }
    
    amount: MetaOapg.properties.amount
    currency: MetaOapg.properties.currency
    paymentType: MetaOapg.properties.paymentType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerCode"]) -> MetaOapg.properties.customerCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceNumber"]) -> MetaOapg.properties.invoiceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethod"]) -> MetaOapg.properties.paymentMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowPartial"]) -> MetaOapg.properties.allowPartial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasConvenienceFee"]) -> MetaOapg.properties.hasConvenienceFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxAmount"]) -> MetaOapg.properties.taxAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paymentType", "amount", "currency", "customerCode", "invoiceNumber", "paymentMethod", "allowPartial", "hasConvenienceFee", "taxAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerCode"]) -> typing.Union[MetaOapg.properties.customerCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceNumber"]) -> typing.Union[MetaOapg.properties.invoiceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethod"]) -> typing.Union[MetaOapg.properties.paymentMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowPartial"]) -> typing.Union[MetaOapg.properties.allowPartial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasConvenienceFee"]) -> typing.Union[MetaOapg.properties.hasConvenienceFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxAmount"]) -> typing.Union[MetaOapg.properties.taxAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paymentType", "amount", "currency", "customerCode", "invoiceNumber", "paymentMethod", "allowPartial", "hasConvenienceFee", "taxAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        paymentType: typing.Union[MetaOapg.properties.paymentType, str, ],
        customerCode: typing.Union[MetaOapg.properties.customerCode, str, schemas.Unset] = schemas.unset,
        invoiceNumber: typing.Union[MetaOapg.properties.invoiceNumber, str, schemas.Unset] = schemas.unset,
        paymentMethod: typing.Union[MetaOapg.properties.paymentMethod, str, schemas.Unset] = schemas.unset,
        allowPartial: typing.Union[MetaOapg.properties.allowPartial, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hasConvenienceFee: typing.Union[MetaOapg.properties.hasConvenienceFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        taxAmount: typing.Union[MetaOapg.properties.taxAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HelcimPayInitializeRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            currency=currency,
            paymentType=paymentType,
            customerCode=customerCode,
            invoiceNumber=invoiceNumber,
            paymentMethod=paymentMethod,
            allowPartial=allowPartial,
            hasConvenienceFee=hasConvenienceFee,
            taxAmount=taxAmount,
            _configuration=_configuration,
            **kwargs,
        )
