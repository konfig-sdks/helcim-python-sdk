# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class Invoice(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            dateCreated = schemas.StrSchema
            dateUpdated = schemas.StrSchema
            datePaid = schemas.StrSchema
            dateIssued = schemas.StrSchema
            status = schemas.StrSchema
            customerId = schemas.IntSchema
            amount = schemas.NumberSchema
            convenienceFee = schemas.NumberSchema
            __annotations__ = {
                "dateCreated": dateCreated,
                "dateUpdated": dateUpdated,
                "datePaid": datePaid,
                "dateIssued": dateIssued,
                "status": status,
                "customerId": customerId,
                "amount": amount,
                "convenienceFee": convenienceFee,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateUpdated"]) -> MetaOapg.properties.dateUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datePaid"]) -> MetaOapg.properties.datePaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateIssued"]) -> MetaOapg.properties.dateIssued: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["convenienceFee"]) -> MetaOapg.properties.convenienceFee: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateCreated", "dateUpdated", "datePaid", "dateIssued", "status", "customerId", "amount", "convenienceFee", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateUpdated"]) -> typing.Union[MetaOapg.properties.dateUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datePaid"]) -> typing.Union[MetaOapg.properties.datePaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateIssued"]) -> typing.Union[MetaOapg.properties.dateIssued, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["convenienceFee"]) -> typing.Union[MetaOapg.properties.convenienceFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateCreated", "dateUpdated", "datePaid", "dateIssued", "status", "customerId", "amount", "convenienceFee", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, schemas.Unset] = schemas.unset,
        dateUpdated: typing.Union[MetaOapg.properties.dateUpdated, str, schemas.Unset] = schemas.unset,
        datePaid: typing.Union[MetaOapg.properties.datePaid, str, schemas.Unset] = schemas.unset,
        dateIssued: typing.Union[MetaOapg.properties.dateIssued, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        convenienceFee: typing.Union[MetaOapg.properties.convenienceFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Invoice':
        return super().__new__(
            cls,
            *args,
            dateCreated=dateCreated,
            dateUpdated=dateUpdated,
            datePaid=datePaid,
            dateIssued=dateIssued,
            status=status,
            customerId=customerId,
            amount=amount,
            convenienceFee=convenienceFee,
            _configuration=_configuration,
            **kwargs,
        )
