# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class InvoiceBase(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            invoiceNumber = schemas.StrSchema
            tipAmount = schemas.NumberSchema
            depositAmount = schemas.NumberSchema
            notes = schemas.StrSchema
            __annotations__ = {
                "invoiceNumber": invoiceNumber,
                "tipAmount": tipAmount,
                "depositAmount": depositAmount,
                "notes": notes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceNumber"]) -> MetaOapg.properties.invoiceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tipAmount"]) -> MetaOapg.properties.tipAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depositAmount"]) -> MetaOapg.properties.depositAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["invoiceNumber", "tipAmount", "depositAmount", "notes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceNumber"]) -> typing.Union[MetaOapg.properties.invoiceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tipAmount"]) -> typing.Union[MetaOapg.properties.tipAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depositAmount"]) -> typing.Union[MetaOapg.properties.depositAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["invoiceNumber", "tipAmount", "depositAmount", "notes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        invoiceNumber: typing.Union[MetaOapg.properties.invoiceNumber, str, schemas.Unset] = schemas.unset,
        tipAmount: typing.Union[MetaOapg.properties.tipAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depositAmount: typing.Union[MetaOapg.properties.depositAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceBase':
        return super().__new__(
            cls,
            *args,
            invoiceNumber=invoiceNumber,
            tipAmount=tipAmount,
            depositAmount=depositAmount,
            notes=notes,
            _configuration=_configuration,
            **kwargs,
        )
