# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class InvoiceCreateAfterProcessing(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def shipping() -> typing.Type['Shipping']:
                return Shipping
        
            @staticmethod
            def pickup() -> typing.Type['Pickup']:
                return Pickup
        
            @staticmethod
            def tax() -> typing.Type['Tax']:
                return Tax
        
            @staticmethod
            def discount() -> typing.Type['Discount']:
                return Discount
            
            
            class lineItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LineItem']:
                        return LineItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LineItem'], typing.List['LineItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lineItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LineItem':
                    return super().__getitem__(i)
            __annotations__ = {
                "shipping": shipping,
                "pickup": pickup,
                "tax": tax,
                "discount": discount,
                "lineItems": lineItems,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping"]) -> 'Shipping': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pickup"]) -> 'Pickup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> 'Tax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount"]) -> 'Discount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineItems"]) -> MetaOapg.properties.lineItems: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["shipping", "pickup", "tax", "discount", "lineItems", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping"]) -> typing.Union['Shipping', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pickup"]) -> typing.Union['Pickup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union['Tax', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount"]) -> typing.Union['Discount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineItems"]) -> typing.Union[MetaOapg.properties.lineItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shipping", "pickup", "tax", "discount", "lineItems", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        shipping: typing.Union['Shipping', schemas.Unset] = schemas.unset,
        pickup: typing.Union['Pickup', schemas.Unset] = schemas.unset,
        tax: typing.Union['Tax', schemas.Unset] = schemas.unset,
        discount: typing.Union['Discount', schemas.Unset] = schemas.unset,
        lineItems: typing.Union[MetaOapg.properties.lineItems, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceCreateAfterProcessing':
        return super().__new__(
            cls,
            *args,
            shipping=shipping,
            pickup=pickup,
            tax=tax,
            discount=discount,
            lineItems=lineItems,
            _configuration=_configuration,
            **kwargs,
        )

from helcim_python_sdk.model.discount import Discount
from helcim_python_sdk.model.line_item import LineItem
from helcim_python_sdk.model.pickup import Pickup
from helcim_python_sdk.model.shipping import Shipping
from helcim_python_sdk.model.tax import Tax
