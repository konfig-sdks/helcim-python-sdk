# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class RefundRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "originalTransactionId",
            "ipAddress",
        }
        
        class properties:
            originalTransactionId = schemas.IntSchema
            amount = schemas.NumberSchema
            ipAddress = schemas.StrSchema
            ecommerce = schemas.BoolSchema
            __annotations__ = {
                "originalTransactionId": originalTransactionId,
                "amount": amount,
                "ipAddress": ipAddress,
                "ecommerce": ecommerce,
            }
    
    amount: MetaOapg.properties.amount
    originalTransactionId: MetaOapg.properties.originalTransactionId
    ipAddress: MetaOapg.properties.ipAddress
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalTransactionId"]) -> MetaOapg.properties.originalTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ecommerce"]) -> MetaOapg.properties.ecommerce: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["originalTransactionId", "amount", "ipAddress", "ecommerce", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalTransactionId"]) -> MetaOapg.properties.originalTransactionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ecommerce"]) -> typing.Union[MetaOapg.properties.ecommerce, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["originalTransactionId", "amount", "ipAddress", "ecommerce", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        originalTransactionId: typing.Union[MetaOapg.properties.originalTransactionId, decimal.Decimal, int, ],
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, ],
        ecommerce: typing.Union[MetaOapg.properties.ecommerce, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RefundRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            originalTransactionId=originalTransactionId,
            ipAddress=ipAddress,
            ecommerce=ecommerce,
            _configuration=_configuration,
            **kwargs,
        )
