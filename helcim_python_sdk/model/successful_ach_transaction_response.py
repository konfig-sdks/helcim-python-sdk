# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class SuccessfulAchTransactionResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            transactionId = schemas.NumberSchema
            batchId = schemas.NumberSchema
            dateCreated = schemas.StrSchema
            statusAuth = schemas.StrSchema
            statusClearing = schemas.StrSchema
            type = schemas.StrSchema
            amount = schemas.NumberSchema
            currency = schemas.StrSchema
            approvalCode = schemas.StrSchema
            bankAccountNumber = schemas.StrSchema
            bankToken = schemas.StrSchema
            invoiceNumber = schemas.StrSchema
            __annotations__ = {
                "transactionId": transactionId,
                "batchId": batchId,
                "dateCreated": dateCreated,
                "statusAuth": statusAuth,
                "statusClearing": statusClearing,
                "type": type,
                "amount": amount,
                "currency": currency,
                "approvalCode": approvalCode,
                "bankAccountNumber": bankAccountNumber,
                "bankToken": bankToken,
                "invoiceNumber": invoiceNumber,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchId"]) -> MetaOapg.properties.batchId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusAuth"]) -> MetaOapg.properties.statusAuth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusClearing"]) -> MetaOapg.properties.statusClearing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalCode"]) -> MetaOapg.properties.approvalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccountNumber"]) -> MetaOapg.properties.bankAccountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankToken"]) -> MetaOapg.properties.bankToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceNumber"]) -> MetaOapg.properties.invoiceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transactionId", "batchId", "dateCreated", "statusAuth", "statusClearing", "type", "amount", "currency", "approvalCode", "bankAccountNumber", "bankToken", "invoiceNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> typing.Union[MetaOapg.properties.transactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchId"]) -> typing.Union[MetaOapg.properties.batchId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusAuth"]) -> typing.Union[MetaOapg.properties.statusAuth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusClearing"]) -> typing.Union[MetaOapg.properties.statusClearing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalCode"]) -> typing.Union[MetaOapg.properties.approvalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccountNumber"]) -> typing.Union[MetaOapg.properties.bankAccountNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankToken"]) -> typing.Union[MetaOapg.properties.bankToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceNumber"]) -> typing.Union[MetaOapg.properties.invoiceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transactionId", "batchId", "dateCreated", "statusAuth", "statusClearing", "type", "amount", "currency", "approvalCode", "bankAccountNumber", "bankToken", "invoiceNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transactionId: typing.Union[MetaOapg.properties.transactionId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        batchId: typing.Union[MetaOapg.properties.batchId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, schemas.Unset] = schemas.unset,
        statusAuth: typing.Union[MetaOapg.properties.statusAuth, str, schemas.Unset] = schemas.unset,
        statusClearing: typing.Union[MetaOapg.properties.statusClearing, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        approvalCode: typing.Union[MetaOapg.properties.approvalCode, str, schemas.Unset] = schemas.unset,
        bankAccountNumber: typing.Union[MetaOapg.properties.bankAccountNumber, str, schemas.Unset] = schemas.unset,
        bankToken: typing.Union[MetaOapg.properties.bankToken, str, schemas.Unset] = schemas.unset,
        invoiceNumber: typing.Union[MetaOapg.properties.invoiceNumber, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SuccessfulAchTransactionResponse':
        return super().__new__(
            cls,
            *args,
            transactionId=transactionId,
            batchId=batchId,
            dateCreated=dateCreated,
            statusAuth=statusAuth,
            statusClearing=statusClearing,
            type=type,
            amount=amount,
            currency=currency,
            approvalCode=approvalCode,
            bankAccountNumber=bankAccountNumber,
            bankToken=bankToken,
            invoiceNumber=invoiceNumber,
            _configuration=_configuration,
            **kwargs,
        )
