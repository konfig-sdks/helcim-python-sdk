# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401


class SuccessfulPaymentResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            transactionId = schemas.NumberSchema
            cardBatchId = schemas.NumberSchema
            dateCreated = schemas.StrSchema
            status = schemas.StrSchema
            user = schemas.StrSchema
            type = schemas.StrSchema
            amount = schemas.NumberSchema
            currency = schemas.StrSchema
            avsResponse = schemas.StrSchema
            cvvResponse = schemas.StrSchema
            approvalCode = schemas.StrSchema
            cardToken = schemas.StrSchema
            cardNumber = schemas.StrSchema
            cardHolderName = schemas.StrSchema
            customerCode = schemas.StrSchema
            invoiceNumber = schemas.StrSchema
            warning = schemas.StrSchema
            __annotations__ = {
                "transactionId": transactionId,
                "cardBatchId": cardBatchId,
                "dateCreated": dateCreated,
                "status": status,
                "user": user,
                "type": type,
                "amount": amount,
                "currency": currency,
                "avsResponse": avsResponse,
                "cvvResponse": cvvResponse,
                "approvalCode": approvalCode,
                "cardToken": cardToken,
                "cardNumber": cardNumber,
                "cardHolderName": cardHolderName,
                "customerCode": customerCode,
                "invoiceNumber": invoiceNumber,
                "warning": warning,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardBatchId"]) -> MetaOapg.properties.cardBatchId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avsResponse"]) -> MetaOapg.properties.avsResponse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cvvResponse"]) -> MetaOapg.properties.cvvResponse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalCode"]) -> MetaOapg.properties.approvalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardToken"]) -> MetaOapg.properties.cardToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardNumber"]) -> MetaOapg.properties.cardNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerCode"]) -> MetaOapg.properties.customerCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceNumber"]) -> MetaOapg.properties.invoiceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warning"]) -> MetaOapg.properties.warning: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transactionId", "cardBatchId", "dateCreated", "status", "user", "type", "amount", "currency", "avsResponse", "cvvResponse", "approvalCode", "cardToken", "cardNumber", "cardHolderName", "customerCode", "invoiceNumber", "warning", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> typing.Union[MetaOapg.properties.transactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardBatchId"]) -> typing.Union[MetaOapg.properties.cardBatchId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avsResponse"]) -> typing.Union[MetaOapg.properties.avsResponse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cvvResponse"]) -> typing.Union[MetaOapg.properties.cvvResponse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalCode"]) -> typing.Union[MetaOapg.properties.approvalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardToken"]) -> typing.Union[MetaOapg.properties.cardToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardNumber"]) -> typing.Union[MetaOapg.properties.cardNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardHolderName"]) -> typing.Union[MetaOapg.properties.cardHolderName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerCode"]) -> typing.Union[MetaOapg.properties.customerCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceNumber"]) -> typing.Union[MetaOapg.properties.invoiceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warning"]) -> typing.Union[MetaOapg.properties.warning, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transactionId", "cardBatchId", "dateCreated", "status", "user", "type", "amount", "currency", "avsResponse", "cvvResponse", "approvalCode", "cardToken", "cardNumber", "cardHolderName", "customerCode", "invoiceNumber", "warning", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transactionId: typing.Union[MetaOapg.properties.transactionId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cardBatchId: typing.Union[MetaOapg.properties.cardBatchId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        user: typing.Union[MetaOapg.properties.user, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        avsResponse: typing.Union[MetaOapg.properties.avsResponse, str, schemas.Unset] = schemas.unset,
        cvvResponse: typing.Union[MetaOapg.properties.cvvResponse, str, schemas.Unset] = schemas.unset,
        approvalCode: typing.Union[MetaOapg.properties.approvalCode, str, schemas.Unset] = schemas.unset,
        cardToken: typing.Union[MetaOapg.properties.cardToken, str, schemas.Unset] = schemas.unset,
        cardNumber: typing.Union[MetaOapg.properties.cardNumber, str, schemas.Unset] = schemas.unset,
        cardHolderName: typing.Union[MetaOapg.properties.cardHolderName, str, schemas.Unset] = schemas.unset,
        customerCode: typing.Union[MetaOapg.properties.customerCode, str, schemas.Unset] = schemas.unset,
        invoiceNumber: typing.Union[MetaOapg.properties.invoiceNumber, str, schemas.Unset] = schemas.unset,
        warning: typing.Union[MetaOapg.properties.warning, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SuccessfulPaymentResponse':
        return super().__new__(
            cls,
            *args,
            transactionId=transactionId,
            cardBatchId=cardBatchId,
            dateCreated=dateCreated,
            status=status,
            user=user,
            type=type,
            amount=amount,
            currency=currency,
            avsResponse=avsResponse,
            cvvResponse=cvvResponse,
            approvalCode=approvalCode,
            cardToken=cardToken,
            cardNumber=cardNumber,
            cardHolderName=cardHolderName,
            customerCode=customerCode,
            invoiceNumber=invoiceNumber,
            warning=warning,
            _configuration=_configuration,
            **kwargs,
        )
