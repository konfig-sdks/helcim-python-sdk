# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from helcim_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from helcim_python_sdk.api_response import AsyncGeneratorResponse
from helcim_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from helcim_python_sdk import schemas  # noqa: F401

from helcim_python_sdk.model.helcim_pay_initialize_request import HelcimPayInitializeRequest as HelcimPayInitializeRequestSchema
from helcim_python_sdk.model.checkout_init_default_response import CheckoutInitDefaultResponse as CheckoutInitDefaultResponseSchema
from helcim_python_sdk.model.checkout_init200_response import CheckoutInit200Response as CheckoutInit200ResponseSchema

from helcim_python_sdk.type.checkout_init_default_response import CheckoutInitDefaultResponse
from helcim_python_sdk.type.checkout_init200_response import CheckoutInit200Response
from helcim_python_sdk.type.helcim_pay_initialize_request import HelcimPayInitializeRequest

from ...api_client import Dictionary
from helcim_python_sdk.pydantic.helcim_pay_initialize_request import HelcimPayInitializeRequest as HelcimPayInitializeRequestPydantic
from helcim_python_sdk.pydantic.checkout_init200_response import CheckoutInit200Response as CheckoutInit200ResponsePydantic
from helcim_python_sdk.pydantic.checkout_init_default_response import CheckoutInitDefaultResponse as CheckoutInitDefaultResponsePydantic

from . import path

# body param
SchemaForRequestBodyApplicationJson = HelcimPayInitializeRequestSchema


request_body_helcim_pay_initialize_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
_auth = [
    'ApiAccessAuth',
]
SchemaFor200ResponseBodyApplicationJson = CheckoutInit200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: CheckoutInit200Response


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: CheckoutInit200Response


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = CheckoutInitDefaultResponseSchema


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    body: CheckoutInitDefaultResponse


@dataclass
class ApiResponseForDefaultAsync(api_client.AsyncApiResponse):
    body: CheckoutInitDefaultResponse


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_checkout_session_mapped_args(
        self,
        payment_type: str,
        amount: typing.Union[int, float],
        currency: str,
        customer_code: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        payment_method: typing.Optional[str] = None,
        allow_partial: typing.Optional[typing.Union[int, float]] = None,
        has_convenience_fee: typing.Optional[typing.Union[int, float]] = None,
        tax_amount: typing.Optional[typing.Union[int, float]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if payment_type is not None:
            _body["paymentType"] = payment_type
        if amount is not None:
            _body["amount"] = amount
        if currency is not None:
            _body["currency"] = currency
        if customer_code is not None:
            _body["customerCode"] = customer_code
        if invoice_number is not None:
            _body["invoiceNumber"] = invoice_number
        if payment_method is not None:
            _body["paymentMethod"] = payment_method
        if allow_partial is not None:
            _body["allowPartial"] = allow_partial
        if has_convenience_fee is not None:
            _body["hasConvenienceFee"] = has_convenience_fee
        if tax_amount is not None:
            _body["taxAmount"] = tax_amount
        args.body = _body
        return args

    async def _acreate_checkout_session_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Creates a HelcimPay.js Checkout Session
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/helcim-pay/initialize',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_helcim_pay_initialize_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserializationAsync(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_checkout_session_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Creates a HelcimPay.js Checkout Session
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/helcim-pay/initialize',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_helcim_pay_initialize_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateCheckoutSessionRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_checkout_session(
        self,
        payment_type: str,
        amount: typing.Union[int, float],
        currency: str,
        customer_code: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        payment_method: typing.Optional[str] = None,
        allow_partial: typing.Optional[typing.Union[int, float]] = None,
        has_convenience_fee: typing.Optional[typing.Union[int, float]] = None,
        tax_amount: typing.Optional[typing.Union[int, float]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_checkout_session_mapped_args(
            payment_type=payment_type,
            amount=amount,
            currency=currency,
            customer_code=customer_code,
            invoice_number=invoice_number,
            payment_method=payment_method,
            allow_partial=allow_partial,
            has_convenience_fee=has_convenience_fee,
            tax_amount=tax_amount,
        )
        return await self._acreate_checkout_session_oapg(
            body=args.body,
            **kwargs,
        )
    
    def create_checkout_session(
        self,
        payment_type: str,
        amount: typing.Union[int, float],
        currency: str,
        customer_code: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        payment_method: typing.Optional[str] = None,
        allow_partial: typing.Optional[typing.Union[int, float]] = None,
        has_convenience_fee: typing.Optional[typing.Union[int, float]] = None,
        tax_amount: typing.Optional[typing.Union[int, float]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_checkout_session_mapped_args(
            payment_type=payment_type,
            amount=amount,
            currency=currency,
            customer_code=customer_code,
            invoice_number=invoice_number,
            payment_method=payment_method,
            allow_partial=allow_partial,
            has_convenience_fee=has_convenience_fee,
            tax_amount=tax_amount,
        )
        return self._create_checkout_session_oapg(
            body=args.body,
        )

class CreateCheckoutSession(BaseApi):

    async def acreate_checkout_session(
        self,
        payment_type: str,
        amount: typing.Union[int, float],
        currency: str,
        customer_code: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        payment_method: typing.Optional[str] = None,
        allow_partial: typing.Optional[typing.Union[int, float]] = None,
        has_convenience_fee: typing.Optional[typing.Union[int, float]] = None,
        tax_amount: typing.Optional[typing.Union[int, float]] = None,
        validate: bool = False,
        **kwargs,
    ) -> CheckoutInit200ResponsePydantic:
        raw_response = await self.raw.acreate_checkout_session(
            payment_type=payment_type,
            amount=amount,
            currency=currency,
            customer_code=customer_code,
            invoice_number=invoice_number,
            payment_method=payment_method,
            allow_partial=allow_partial,
            has_convenience_fee=has_convenience_fee,
            tax_amount=tax_amount,
            **kwargs,
        )
        if validate:
            return CheckoutInit200ResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CheckoutInit200ResponsePydantic, raw_response.body)
    
    
    def create_checkout_session(
        self,
        payment_type: str,
        amount: typing.Union[int, float],
        currency: str,
        customer_code: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        payment_method: typing.Optional[str] = None,
        allow_partial: typing.Optional[typing.Union[int, float]] = None,
        has_convenience_fee: typing.Optional[typing.Union[int, float]] = None,
        tax_amount: typing.Optional[typing.Union[int, float]] = None,
        validate: bool = False,
    ) -> CheckoutInit200ResponsePydantic:
        raw_response = self.raw.create_checkout_session(
            payment_type=payment_type,
            amount=amount,
            currency=currency,
            customer_code=customer_code,
            invoice_number=invoice_number,
            payment_method=payment_method,
            allow_partial=allow_partial,
            has_convenience_fee=has_convenience_fee,
            tax_amount=tax_amount,
        )
        if validate:
            return CheckoutInit200ResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CheckoutInit200ResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        payment_type: str,
        amount: typing.Union[int, float],
        currency: str,
        customer_code: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        payment_method: typing.Optional[str] = None,
        allow_partial: typing.Optional[typing.Union[int, float]] = None,
        has_convenience_fee: typing.Optional[typing.Union[int, float]] = None,
        tax_amount: typing.Optional[typing.Union[int, float]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_checkout_session_mapped_args(
            payment_type=payment_type,
            amount=amount,
            currency=currency,
            customer_code=customer_code,
            invoice_number=invoice_number,
            payment_method=payment_method,
            allow_partial=allow_partial,
            has_convenience_fee=has_convenience_fee,
            tax_amount=tax_amount,
        )
        return await self._acreate_checkout_session_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        payment_type: str,
        amount: typing.Union[int, float],
        currency: str,
        customer_code: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        payment_method: typing.Optional[str] = None,
        allow_partial: typing.Optional[typing.Union[int, float]] = None,
        has_convenience_fee: typing.Optional[typing.Union[int, float]] = None,
        tax_amount: typing.Optional[typing.Union[int, float]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_checkout_session_mapped_args(
            payment_type=payment_type,
            amount=amount,
            currency=currency,
            customer_code=customer_code,
            invoice_number=invoice_number,
            payment_method=payment_method,
            allow_partial=allow_partial,
            has_convenience_fee=has_convenience_fee,
            tax_amount=tax_amount,
        )
        return self._create_checkout_session_oapg(
            body=args.body,
        )

