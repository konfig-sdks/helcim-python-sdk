# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel


class BankAccount(BaseModel):
    # The bank account holder first name
    first_name: str = Field(alias='firstName')

    # The bank account holder last name
    last_name: str = Field(alias='lastName')

    # The company name
    company_name: str = Field(alias='companyName')

    # Bank account number
    bank_account_number: str = Field(alias='bankAccountNumber')

    # CHECKING - Chequing, SAVINGS - Savings
    account_type: str = Field(alias='accountType')

    # PERSONAL - Personal Bank Account, CORPORATE - Corporate Bank Account
    account_corporate: str = Field(alias='accountCorporate')

    street_address: str = Field(alias='streetAddress')

    city: str = Field(alias='city')

    # Only allow CAN - Canada, USA - United States
    country: str = Field(alias='country')

    province: str = Field(alias='province')

    postal_code: str = Field(alias='postalCode')

    # Required for Canadian Bank Account Holder, the institution number - three digits - identifies your bank.
    bank_id_number: typing.Optional[str] = Field(None, alias='bankIdNumber')

    # Required for Canadian Bank Account Holder, the transit number - five digits - shows which branch you opened your account at.
    transit_number: typing.Optional[str] = Field(None, alias='transitNumber')

    # Required for US Bank Account Holder, a nine-digit code printed on the bottom of checks to identify the financial institution on which it was drawn.
    routing_number: typing.Optional[str] = Field(None, alias='routingNumber')

    # Customer given permission for a company or financial institution to debit a bank account when the payment is due.
    pad_agreement: typing.Optional[bool] = Field(None, alias='padAgreement')
    class Config:
        arbitrary_types_allowed = True
