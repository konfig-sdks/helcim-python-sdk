# coding: utf-8

"""
    The Helcim API

    This API covers publicly accessible merchant actions

    The version of the OpenAPI document: 2.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel


class HelcimPayInitializeRequest(BaseModel):
    # Payment Type. Valid payment types are purchase | preauth | verify
    payment_type: str = Field(alias='paymentType')

    # The amount of the transaction to be processed
    amount: typing.Union[int, float] = Field(alias='amount')

    # Currency abbreviation. CAD | USD
    currency: str = Field(alias='currency')

    # This is the code of an existing customer in Helcim associated with this checkout
    customer_code: typing.Optional[str] = Field(None, alias='customerCode')

    # This is the number of an existing invoice in Helcim associated with this checkout
    invoice_number: typing.Optional[str] = Field(None, alias='invoiceNumber')

    # This is the payment method (credit card, ACH) that customer can use to pay the amount. cc | ach | cc-ach
    payment_method: typing.Optional[str] = Field(None, alias='paymentMethod')

    # This is used to determine whether the partial payment UI will be displayed to the customer
    allow_partial: typing.Optional[typing.Union[int, float]] = Field(None, alias='allowPartial')

    # This is used to apply the convenience fee rate to credit card transaction should customer chooses this payment method
    has_convenience_fee: typing.Optional[typing.Union[int, float]] = Field(None, alias='hasConvenienceFee')

    # This is used to enable level 2 processing lower rates. The value should be the dollar amount of the tax to 2 decimal places.
    tax_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='taxAmount')
    class Config:
        arbitrary_types_allowed = True
